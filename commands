git init

git status
git diff					#diff associated with unstaged files
git diff --staged			#staged (but not commited)
git diff file_name			#shows diff associated with file_name

git add file_name
git add -p file_name		#git will show patch and ask us to stage or not
git add -A					#add all untracked files and also modified 
git rm <file_name>			#remove file
git mv <source> <dst>		#rename or move file

git commit -m "message"		#commits the changes that are in staging area
git commit -a -m "message"	#commits tracked files directly (no need to stage)
git commit --amend 			#commits the changes in current staging area to previous commit
								(and also we can update commit messsage using this)
								Note: avoid amending commits that have already made public

git log						#shows log of commits
git log -p	[-num]			#includes patch
git log --stat
git log --graph --oneline	#shows graphical form of commit history
git show <commit_id> 		#shows information regarding commit including patch

echo .DS_STORE > .gitignore #ignore .DS_STORE (generated by os automatically)
							#the files in .gitignore will ignored by git status command

git checkout <file_name>  	#revert changes(unstaged) to previous commit
git checkout -p <file> 		#rollback through each change
git reset HEAD <file> 		#revert changes(staged) to previous commit
git revert HEAD				#rollback to previous commit( it's also a commit)
								(creates new commit that is inverse to previous one)
git revert <commit_id>		#rollback to previous commit of commit with commit_id


git branch
git checkout <branch_name>	#changes branch to given
git checkout -b <newbranch>	#creates and checkout
git branch -d branch_name	#deletes the brach
git merge <branch>			#merges <branch> to current branch
git merge --abort			#aborts merge (when merge conflicts occur)



//remote repo
git clone origin(repo url)
git push
git push -f
git pull					#git pull = git fetch + git merge
git config --global credential.helper cache
git remote -v				#show origin URLs
git remote show origin
git branch -r				#show branches
git fetch					#sync local repo with remote
git log origin/master
git merge origin/master		#merge local origin/master to local branch
git remote update			#
git push -u origin <branch>	#push new branch to remote repo
git rebase master			#to make commit history linear(to avoid three-way merge)
								instead of merge we can use rebase that adds current branch commits
								on top of master, [then  switch back to master and git merge <branch> for fast forward]
git rebase origin/master	#add current work on top of origin/master
git rebase -i master		#interactive rebase[ squash, pick etc.,]
git push --delete origin <branch>	#deltes <branch> remotely
git remote add upstream https://github.com/vinu7/<repo>
